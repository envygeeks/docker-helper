#!/bin/sh
[ "$DEBUG" ] && set -x
set -e

# --
# @echo Nothing
# Take in a username:uid and check if a user exists.
# You can also just send username.
# @return 0|1
# --
user_exists() {
  canonical=$(echo $1 | awk -F: '{ print $1 }')
  uid=$(echo $1 | awk -F: '{ print $2 }')
  exec >/dev/null 2>&1

  if [ "$uid" ]
    then if getent passwd "$canonical" && getent passwd "$uid"
      then return 0
      else return 1
    fi
  elif getent passwd "$canonical"
    then return 0
    else return 1
  fi
}

# --
# @echo Nothing
# Take in a group:group and check if a group exists.
# You can also just send group.
# @return 0|1
# --
group_exists() {
  local canonical=$(echo $1 | awk -F: '{ print $1 }')
  local gid=$(echo $1 | awk -F: '{ print $2 }')

  if [ "$gid" ]
    then if getent group "$canonical" && getent group "$gid"
      then return 0
      else return 1
    fi
  elif getent group "$canonical"
    then return 0
    else return 1
  fi
}

# --
# @echo Nothing
# Add a user across the platform lines.
# @return 0|1
# --
add_system_users() {
  for string in "$@"; do
    local canonical=$(echo $string | awk -F: '{ print $1 }')
    local uid=$(echo $string | awk -F: '{ print $2 }')
    local gid=$(echo $string | awk -F: '{ print $3 }')
    [ -z "$gid" ] && local gid=$uid

    #

    if [ "$(os)" = ubuntu ]; then
      addgroup --gid "$gid" "$canonical"
      adduser  --gid "$gid" --uid "$uid" --shell /bin/bash \
        --system "$canonical"

    else
      addgroup -g "$gid" "$canonical"
      adduser  -s /bin/bash -G "$canonical" -u "$uid" -D "$canonical"
      sed -ri "s!:Linux User,{3}:!:linux-user:!" /etc/passwd
      mkdir -p "/home/$canonical"
    fi
  done
}

# --
# @echo Nothing
# Modifies a users GID and UID to your preference and fixes their files.
# @return 0
# --
reset_users() {
  sed -ri "s!:Linux User,{3}:!:linux-user:!" /etc/passwd

  for u in "$@"; do
    canonical=$(echo $u | awk -F: '{ print $1 }')
      new_uid=$(echo $u | awk -F: '{ print $2 }')
      new_gid=$new_uid

    # We pull out the current users gid so that we can make
    # sure that they match before we alter the user entirely,
    # we do not alter non-canonical-matches.

    old_gid=$(getent group $canonical | awk -F: '{ print $3 }')
    users_current_gid=$(getent passwd $canonical | awk -F: '{ print $4 }')
    old_uid=$(getent passwd $canonical | awk -F: '{ print $3 }')

    # Replace the canonical group and user with the new
    # requested ID, this doesn't affect what happens when we
    # double check to make sure they match on the user.

    sed -ri "s/^$canonical:x:$old_uid/$canonical:x:$new_uid/" /etc/passwd
    sed -ri "s/^$canonical:x:$old_gid/$canonical:x:$new_gid/" /etc/group

    # We only replace the users GID if they have the
    # current GID that they should have by default.  Users
    # can do what they like on Linux though so we don't alter
    # it if it's not a canonical match.

    if [ "$old_gid" = "$users_current_gid" ]; then
      sed -ri "s/^$canonical:x:$new_uid:$old_gid/$canonical:x:$new_uid:$new_gid/" /etc/passwd
      find / -group $old_gid \
          -not -path '/proc/*' \
          -not -path '/sys/*' \
          -not -path '/cdrom/*' \
          -not -path '/dev/*' \
        -exec chgrp -h $new_gid '{}' \+
    fi

    #

    find / -user $old_uid \
        -not -path '/proc/*' \
        -not -path '/sys/*' \
        -not -path '/cdrom/*' \
        -not -path '/dev/*' \
      -exec chown -h $new_uid '{}' \+
  done
}

# --

reset_user() {
  reset_users "$@"
}

# --

add_user_1000() {
  add_system_users $1:1000:1000
}
